using BinaryProvider
using CxxWrap # this is needed for opening the dependency lib. Otherwise Libdl.dlopen fails

##################### Fastjet ###########################s
const fjversion = "v3.3.1"
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libfastjetwrap"], :libfastjetwrap),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/jstrube/FastJetWrapBuilder/releases/download/v0.2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/FastJetWrapBuilder.v0.2.0.x86_64-apple-darwin14-gcc7.tar.gz", "d4303571fb22d399bc66847a7c86e2c005e1ae2cd12cb12332afea8273d65078"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/FastJetWrapBuilder.v0.2.0.x86_64-apple-darwin14-gcc8.tar.gz", "fefe6b8037fdf33b48df9b713f1c61917651e6146484cf6c512c4ce8bf883e31"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/FastJetWrapBuilder.v0.2.0.x86_64-linux-gnu-gcc7-cxx11.tar.gz", "b2d241def3dbb4e7871b2047349e04e3367fc5c0f3332a9dd3a853b88d82a536"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/FastJetWrapBuilder.v0.2.0.x86_64-linux-gnu-gcc8-cxx11.tar.gz", "110ac00cdfe44f28fef9d24d0e0de5c4c52dbfc7f15658313ae71950e130f4a0"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
