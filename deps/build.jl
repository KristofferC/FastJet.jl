using BinaryProvider
using CxxWrap # this is needed for opening the dependency lib. Otherwise Libdl.dlopen fails

##################### Fastjet ###########################
# We are trying to find the right version of LCIO. By default, don't set anything and the right version will just be downloaded. However, for debugging purposes, we'd might want to use the pre-installed lib
const fjversion = "v3.3.1"
const verbose = "--verbose" in ARGS
const fjprefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))

# The products that we will ensure are always built
fjproducts = [
    LibraryProduct(fjprefix, "libsiscone", :libsiscone),
    LibraryProduct(fjprefix, "libfastjet", :libfastjet),
    LibraryProduct(fjprefix, "libfastjettools", :libfastjettools),
    LibraryProduct(fjprefix, "libsiscone_spherical", :libsisconeSpherical),
    LibraryProduct(fjprefix, "libfastjetplugins", :libfastjetplugins)
]
# Download binaries from hosted location
bin_prefix = "https://github.com/jstrube/FastJetBuilder/releases/download/v3.3.3.3"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:x86_64) => ("$bin_prefix/FastJetBuilder.v0.1.0.x86_64-linux-gnu.tar.gz", "5da61f184ff4ec5c916791099f66d752842da5a99b17b3a75039642f21cbd49e"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in fjproducts)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=fjprefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=fjprefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

######################################################

################### LCIO Wrapper #####################
const wrapprefix = Prefix(joinpath(@__DIR__, "usr"))

# Download binaries from hosted location
bin_prefix = "https://github.com/jstrube/FastJetWrapBuilder/releases/download/v0.0.5"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/FastJetWrapBuilder.v0.0.5.x86_64-linux-gnu.tar.gz", "0ae396b951ab9bfe78483a42d96f4e23a109f72212cca0d7f089375ac7cb7565"),
)

# The products that we will ensure are always built
wrapproducts = [
    LibraryProduct(wrapprefix, ["libfastjetwrap"], :libfastjetwrap),
]

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in wrapproducts)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=wrapprefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=wrapprefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end
######################################################
