using BinaryProvider
using CxxWrap # this is needed for opening the dependency lib. Otherwise Libdl.dlopen fails

##################### Fastjet ###########################s
const fjversion = "v3.3.1"
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libfastjetwrap"], :libfastjetwrap),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/jstrube/FastJetWrapBuilder/releases/download/v0.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/FastJetWrapBuilder.v0.1.0.x86_64-apple-darwin14-gcc7.tar.gz", "251e0c6402e123576598e404ad076b0405cad285df1a31c27c87b727f5b69316"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/FastJetWrapBuilder.v0.1.0.x86_64-apple-darwin14-gcc8.tar.gz", "7615aa615bfad4886c1e87bf546d5d728901235eef7dcec6b2d449b61ef0f0a3"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/FastJetWrapBuilder.v0.1.0.x86_64-linux-gnu-gcc7-cxx11.tar.gz", "e4a12d407f156440d9827959945f213151d1815498d2197384342ae3db70a849"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/FastJetWrapBuilder.v0.1.0.x86_64-linux-gnu-gcc8-cxx11.tar.gz", "ede0a42256f0a5a613d71d934e5b6baee5cbd04d65657644d6134e102e752a6a"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
